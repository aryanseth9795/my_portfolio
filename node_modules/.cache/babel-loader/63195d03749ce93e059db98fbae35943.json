{"ast":null,"code":"/**\r\n * Defaults & options\r\n * @returns {object} Typed defaults & options\r\n * @public\r\n */\nconst defaults = {\n  /**\r\n   * @property {array} strings strings to be typed\r\n   * @property {string} stringsElement ID of element containing string children\r\n   */\n  strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n  stringsElement: null,\n\n  /**\r\n   * @property {number} typeSpeed type speed in milliseconds\r\n   */\n  typeSpeed: 0,\n\n  /**\r\n   * @property {number} startDelay time before typing starts in milliseconds\r\n   */\n  startDelay: 0,\n\n  /**\r\n   * @property {number} backSpeed backspacing speed in milliseconds\r\n   */\n  backSpeed: 0,\n\n  /**\r\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\r\n   */\n  smartBackspace: true,\n\n  /**\r\n   * @property {boolean} shuffle shuffle the strings\r\n   */\n  shuffle: false,\n\n  /**\r\n   * @property {number} backDelay time before backspacing in milliseconds\r\n   */\n  backDelay: 700,\n\n  /**\r\n   * @property {boolean} fadeOut Fade out instead of backspace\r\n   * @property {string} fadeOutClass css class for fade animation\r\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\r\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\r\n   * @property {boolean} loop loop strings\r\n   * @property {number} loopCount amount of loops\r\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\r\n   * @property {boolean} showCursor show cursor\r\n   * @property {string} cursorChar character for cursor\r\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\r\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\r\n   * @property {string} attr attribute for typing\r\n   * Ex: input placeholder, value, or just HTML text\r\n   */\n  attr: null,\n\n  /**\r\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\r\n   */\n  bindInputFocusEvents: false,\n\n  /**\r\n   * @property {string} contentType 'html' or 'null' for plaintext\r\n   */\n  contentType: 'html',\n\n  /**\r\n   * Before it begins typing\r\n   * @param {Typed} self\r\n   */\n  onBegin: self => {},\n\n  /**\r\n   * All typing is complete\r\n   * @param {Typed} self\r\n   */\n  onComplete: self => {},\n\n  /**\r\n   * Before each string is typed\r\n   * @param {number} arrayPos\r\n   * @param {Typed} self\r\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\r\n   * After each string is typed\r\n   * @param {number} arrayPos\r\n   * @param {Typed} self\r\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\r\n   * During looping, after last string is typed\r\n   * @param {Typed} self\r\n   */\n  onLastStringBackspaced: self => {},\n\n  /**\r\n   * Typing has been stopped\r\n   * @param {number} arrayPos\r\n   * @param {Typed} self\r\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\r\n   * Typing has been started after being stopped\r\n   * @param {number} arrayPos\r\n   * @param {Typed} self\r\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\r\n   * After reset\r\n   * @param {Typed} self\r\n   */\n  onReset: self => {},\n\n  /**\r\n   * After stop\r\n   * @param {number} arrayPos\r\n   * @param {Typed} self\r\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\r\n   * After start\r\n   * @param {number} arrayPos\r\n   * @param {Typed} self\r\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\r\n   * After destroy\r\n   * @param {Typed} self\r\n   */\n  onDestroy: self => {}\n};\nexport default defaults;","map":{"version":3,"names":["defaults","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","self","onComplete","preStringTyped","arrayPos","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy"],"sources":["F:/Desktop/react/my/src/components/defaults.js"],"sourcesContent":["/**\r\n * Defaults & options\r\n * @returns {object} Typed defaults & options\r\n * @public\r\n */\r\n\r\nconst defaults = {\r\n    /**\r\n     * @property {array} strings strings to be typed\r\n     * @property {string} stringsElement ID of element containing string children\r\n     */\r\n    strings: [\r\n      'These are the default values...',\r\n      'You know what you should do?',\r\n      'Use your own!',\r\n      'Have a great day!',\r\n    ],\r\n    stringsElement: null,\r\n  \r\n    /**\r\n     * @property {number} typeSpeed type speed in milliseconds\r\n     */\r\n    typeSpeed: 0,\r\n  \r\n    /**\r\n     * @property {number} startDelay time before typing starts in milliseconds\r\n     */\r\n    startDelay: 0,\r\n  \r\n    /**\r\n     * @property {number} backSpeed backspacing speed in milliseconds\r\n     */\r\n    backSpeed: 0,\r\n  \r\n    /**\r\n     * @property {boolean} smartBackspace only backspace what doesn't match the previous string\r\n     */\r\n    smartBackspace: true,\r\n  \r\n    /**\r\n     * @property {boolean} shuffle shuffle the strings\r\n     */\r\n    shuffle: false,\r\n  \r\n    /**\r\n     * @property {number} backDelay time before backspacing in milliseconds\r\n     */\r\n    backDelay: 700,\r\n  \r\n    /**\r\n     * @property {boolean} fadeOut Fade out instead of backspace\r\n     * @property {string} fadeOutClass css class for fade animation\r\n     * @property {boolean} fadeOutDelay Fade out delay in milliseconds\r\n     */\r\n    fadeOut: false,\r\n    fadeOutClass: 'typed-fade-out',\r\n    fadeOutDelay: 500,\r\n  \r\n    /**\r\n     * @property {boolean} loop loop strings\r\n     * @property {number} loopCount amount of loops\r\n     */\r\n    loop: false,\r\n    loopCount: Infinity,\r\n  \r\n    /**\r\n     * @property {boolean} showCursor show cursor\r\n     * @property {string} cursorChar character for cursor\r\n     * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\r\n     */\r\n    showCursor: true,\r\n    cursorChar: '|',\r\n    autoInsertCss: true,\r\n  \r\n    /**\r\n     * @property {string} attr attribute for typing\r\n     * Ex: input placeholder, value, or just HTML text\r\n     */\r\n    attr: null,\r\n  \r\n    /**\r\n     * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\r\n     */\r\n    bindInputFocusEvents: false,\r\n  \r\n    /**\r\n     * @property {string} contentType 'html' or 'null' for plaintext\r\n     */\r\n    contentType: 'html',\r\n  \r\n    /**\r\n     * Before it begins typing\r\n     * @param {Typed} self\r\n     */\r\n    onBegin: (self) => {},\r\n  \r\n    /**\r\n     * All typing is complete\r\n     * @param {Typed} self\r\n     */\r\n    onComplete: (self) => {},\r\n  \r\n    /**\r\n     * Before each string is typed\r\n     * @param {number} arrayPos\r\n     * @param {Typed} self\r\n     */\r\n    preStringTyped: (arrayPos, self) => {},\r\n  \r\n    /**\r\n     * After each string is typed\r\n     * @param {number} arrayPos\r\n     * @param {Typed} self\r\n     */\r\n    onStringTyped: (arrayPos, self) => {},\r\n  \r\n    /**\r\n     * During looping, after last string is typed\r\n     * @param {Typed} self\r\n     */\r\n    onLastStringBackspaced: (self) => {},\r\n  \r\n    /**\r\n     * Typing has been stopped\r\n     * @param {number} arrayPos\r\n     * @param {Typed} self\r\n     */\r\n    onTypingPaused: (arrayPos, self) => {},\r\n  \r\n    /**\r\n     * Typing has been started after being stopped\r\n     * @param {number} arrayPos\r\n     * @param {Typed} self\r\n     */\r\n    onTypingResumed: (arrayPos, self) => {},\r\n  \r\n    /**\r\n     * After reset\r\n     * @param {Typed} self\r\n     */\r\n    onReset: (self) => {},\r\n  \r\n    /**\r\n     * After stop\r\n     * @param {number} arrayPos\r\n     * @param {Typed} self\r\n     */\r\n    onStop: (arrayPos, self) => {},\r\n  \r\n    /**\r\n     * After start\r\n     * @param {number} arrayPos\r\n     * @param {Typed} self\r\n     */\r\n    onStart: (arrayPos, self) => {},\r\n  \r\n    /**\r\n     * After destroy\r\n     * @param {Typed} self\r\n     */\r\n    onDestroy: (self) => {},\r\n  };\r\n  \r\n  export default defaults;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,MAAMA,QAAQ,GAAG;EACb;AACJ;AACA;AACA;EACIC,OAAO,EAAE,CACP,iCADO,EAEP,8BAFO,EAGP,eAHO,EAIP,mBAJO,CALI;EAWbC,cAAc,EAAE,IAXH;;EAab;AACJ;AACA;EACIC,SAAS,EAAE,CAhBE;;EAkBb;AACJ;AACA;EACIC,UAAU,EAAE,CArBC;;EAuBb;AACJ;AACA;EACIC,SAAS,EAAE,CA1BE;;EA4Bb;AACJ;AACA;EACIC,cAAc,EAAE,IA/BH;;EAiCb;AACJ;AACA;EACIC,OAAO,EAAE,KApCI;;EAsCb;AACJ;AACA;EACIC,SAAS,EAAE,GAzCE;;EA2Cb;AACJ;AACA;AACA;AACA;EACIC,OAAO,EAAE,KAhDI;EAiDbC,YAAY,EAAE,gBAjDD;EAkDbC,YAAY,EAAE,GAlDD;;EAoDb;AACJ;AACA;AACA;EACIC,IAAI,EAAE,KAxDO;EAyDbC,SAAS,EAAEC,QAzDE;;EA2Db;AACJ;AACA;AACA;AACA;EACIC,UAAU,EAAE,IAhEC;EAiEbC,UAAU,EAAE,GAjEC;EAkEbC,aAAa,EAAE,IAlEF;;EAoEb;AACJ;AACA;AACA;EACIC,IAAI,EAAE,IAxEO;;EA0Eb;AACJ;AACA;EACIC,oBAAoB,EAAE,KA7ET;;EA+Eb;AACJ;AACA;EACIC,WAAW,EAAE,MAlFA;;EAoFb;AACJ;AACA;AACA;EACIC,OAAO,EAAGC,IAAD,IAAU,CAAE,CAxFR;;EA0Fb;AACJ;AACA;AACA;EACIC,UAAU,EAAGD,IAAD,IAAU,CAAE,CA9FX;;EAgGb;AACJ;AACA;AACA;AACA;EACIE,cAAc,EAAE,CAACC,QAAD,EAAWH,IAAX,KAAoB,CAAE,CArGzB;;EAuGb;AACJ;AACA;AACA;AACA;EACII,aAAa,EAAE,CAACD,QAAD,EAAWH,IAAX,KAAoB,CAAE,CA5GxB;;EA8Gb;AACJ;AACA;AACA;EACIK,sBAAsB,EAAGL,IAAD,IAAU,CAAE,CAlHvB;;EAoHb;AACJ;AACA;AACA;AACA;EACIM,cAAc,EAAE,CAACH,QAAD,EAAWH,IAAX,KAAoB,CAAE,CAzHzB;;EA2Hb;AACJ;AACA;AACA;AACA;EACIO,eAAe,EAAE,CAACJ,QAAD,EAAWH,IAAX,KAAoB,CAAE,CAhI1B;;EAkIb;AACJ;AACA;AACA;EACIQ,OAAO,EAAGR,IAAD,IAAU,CAAE,CAtIR;;EAwIb;AACJ;AACA;AACA;AACA;EACIS,MAAM,EAAE,CAACN,QAAD,EAAWH,IAAX,KAAoB,CAAE,CA7IjB;;EA+Ib;AACJ;AACA;AACA;AACA;EACIU,OAAO,EAAE,CAACP,QAAD,EAAWH,IAAX,KAAoB,CAAE,CApJlB;;EAsJb;AACJ;AACA;AACA;EACIW,SAAS,EAAGX,IAAD,IAAU,CAAE;AA1JV,CAAjB;AA6JE,eAAetB,QAAf"},"metadata":{},"sourceType":"module"}